/* 
 * YNAB API Endpoints
 *
 * Our API uses a REST based design, leverages the JSON data format, and relies upon HTTPS for transport. We respond with meaningful HTTP response codes and if an error occurs, we include error details in the response body.  API Documentation is at https://api.youneedabudget.com
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct HybridTransaction {
  #[serde(rename = "id")]
  id: String,
  /// The transaction date in ISO format (e.g. 2016-12-01)
  #[serde(rename = "date")]
  date: String,
  /// The transaction amount in milliunits format
  #[serde(rename = "amount")]
  amount: i64,
  #[serde(rename = "memo")]
  memo: Option<String>,
  /// The cleared status of the transaction
  #[serde(rename = "cleared")]
  cleared: String,
  /// Whether or not the transaction is approved
  #[serde(rename = "approved")]
  approved: bool,
  /// The transaction flag
  #[serde(rename = "flag_color")]
  flag_color: Option<String>,
  #[serde(rename = "account_id")]
  account_id: String,
  #[serde(rename = "payee_id")]
  payee_id: Option<String>,
  #[serde(rename = "category_id")]
  category_id: Option<String>,
  /// If a transfer transaction, the account to which it transfers
  #[serde(rename = "transfer_account_id")]
  transfer_account_id: Option<String>,
  /// If a transfer transaction, the id of transaction on the other side of the transfer
  #[serde(rename = "transfer_transaction_id")]
  transfer_transaction_id: Option<String>,
  /// If transaction is matched, the id of the matched transaction
  #[serde(rename = "matched_transaction_id")]
  matched_transaction_id: Option<String>,
  /// If the transaction was imported, this field is a unique (by account) import identifier.  If this transaction was imported through File Based Import or Direct Import and not through the API, the import_id will have the format: 'YNAB:[milliunit_amount]:[iso_date]:[occurrence]'.  For example, a transaction dated 2015-12-30 in the amount of -$294.23 USD would have an import_id of 'YNAB:-294230:2015-12-30:1'.  If a second transaction on the same account was imported and had the same date and same amount, its import_id would be 'YNAB:-294230:2015-12-30:2'.
  #[serde(rename = "import_id")]
  import_id: Option<String>,
  /// If the transaction was imported, the payee name that was used when importing and before applying any payee rename rules
  #[serde(rename = "import_payee_name")]
  import_payee_name: Option<String>,
  /// If the transaction was imported, the original payee name as it appeared on the statement
  #[serde(rename = "import_payee_name_original")]
  import_payee_name_original: Option<String>,
  /// Whether or not the transaction has been deleted.  Deleted transactions will only be included in delta requests.
  #[serde(rename = "deleted")]
  deleted: bool,
  /// Whether the hybrid transaction represents a regular transaction or a subtransaction
  #[serde(rename = "type")]
  _type: String,
  /// For subtransaction types, this is the id of the parent transaction.  For transaction types, this id will be always be null.
  #[serde(rename = "parent_transaction_id")]
  parent_transaction_id: Option<String>,
  #[serde(rename = "account_name")]
  account_name: String,
  #[serde(rename = "payee_name")]
  payee_name: Option<String>,
  #[serde(rename = "category_name")]
  category_name: Option<String>
}

impl HybridTransaction {
  pub fn new(id: String, date: String, amount: i64, cleared: String, approved: bool, account_id: String, deleted: bool, _type: String, account_name: String) -> HybridTransaction {
    HybridTransaction {
      id: id,
      date: date,
      amount: amount,
      memo: None,
      cleared: cleared,
      approved: approved,
      flag_color: None,
      account_id: account_id,
      payee_id: None,
      category_id: None,
      transfer_account_id: None,
      transfer_transaction_id: None,
      matched_transaction_id: None,
      import_id: None,
      import_payee_name: None,
      import_payee_name_original: None,
      deleted: deleted,
      _type: _type,
      parent_transaction_id: None,
      account_name: account_name,
      payee_name: None,
      category_name: None
    }
  }

  pub fn set_id(&mut self, id: String) {
    self.id = id;
  }

  pub fn with_id(mut self, id: String) -> HybridTransaction {
    self.id = id;
    self
  }

  pub fn id(&self) -> &String {
    &self.id
  }


  pub fn set_date(&mut self, date: String) {
    self.date = date;
  }

  pub fn with_date(mut self, date: String) -> HybridTransaction {
    self.date = date;
    self
  }

  pub fn date(&self) -> &String {
    &self.date
  }


  pub fn set_amount(&mut self, amount: i64) {
    self.amount = amount;
  }

  pub fn with_amount(mut self, amount: i64) -> HybridTransaction {
    self.amount = amount;
    self
  }

  pub fn amount(&self) -> &i64 {
    &self.amount
  }


  pub fn set_memo(&mut self, memo: String) {
    self.memo = Some(memo);
  }

  pub fn with_memo(mut self, memo: String) -> HybridTransaction {
    self.memo = Some(memo);
    self
  }

  pub fn memo(&self) -> Option<&String> {
    self.memo.as_ref()
  }

  pub fn reset_memo(&mut self) {
    self.memo = None;
  }

  pub fn set_cleared(&mut self, cleared: String) {
    self.cleared = cleared;
  }

  pub fn with_cleared(mut self, cleared: String) -> HybridTransaction {
    self.cleared = cleared;
    self
  }

  pub fn cleared(&self) -> &String {
    &self.cleared
  }


  pub fn set_approved(&mut self, approved: bool) {
    self.approved = approved;
  }

  pub fn with_approved(mut self, approved: bool) -> HybridTransaction {
    self.approved = approved;
    self
  }

  pub fn approved(&self) -> &bool {
    &self.approved
  }


  pub fn set_flag_color(&mut self, flag_color: String) {
    self.flag_color = Some(flag_color);
  }

  pub fn with_flag_color(mut self, flag_color: String) -> HybridTransaction {
    self.flag_color = Some(flag_color);
    self
  }

  pub fn flag_color(&self) -> Option<&String> {
    self.flag_color.as_ref()
  }

  pub fn reset_flag_color(&mut self) {
    self.flag_color = None;
  }

  pub fn set_account_id(&mut self, account_id: String) {
    self.account_id = account_id;
  }

  pub fn with_account_id(mut self, account_id: String) -> HybridTransaction {
    self.account_id = account_id;
    self
  }

  pub fn account_id(&self) -> &String {
    &self.account_id
  }


  pub fn set_payee_id(&mut self, payee_id: String) {
    self.payee_id = Some(payee_id);
  }

  pub fn with_payee_id(mut self, payee_id: String) -> HybridTransaction {
    self.payee_id = Some(payee_id);
    self
  }

  pub fn payee_id(&self) -> Option<&String> {
    self.payee_id.as_ref()
  }

  pub fn reset_payee_id(&mut self) {
    self.payee_id = None;
  }

  pub fn set_category_id(&mut self, category_id: String) {
    self.category_id = Some(category_id);
  }

  pub fn with_category_id(mut self, category_id: String) -> HybridTransaction {
    self.category_id = Some(category_id);
    self
  }

  pub fn category_id(&self) -> Option<&String> {
    self.category_id.as_ref()
  }

  pub fn reset_category_id(&mut self) {
    self.category_id = None;
  }

  pub fn set_transfer_account_id(&mut self, transfer_account_id: String) {
    self.transfer_account_id = Some(transfer_account_id);
  }

  pub fn with_transfer_account_id(mut self, transfer_account_id: String) -> HybridTransaction {
    self.transfer_account_id = Some(transfer_account_id);
    self
  }

  pub fn transfer_account_id(&self) -> Option<&String> {
    self.transfer_account_id.as_ref()
  }

  pub fn reset_transfer_account_id(&mut self) {
    self.transfer_account_id = None;
  }

  pub fn set_transfer_transaction_id(&mut self, transfer_transaction_id: String) {
    self.transfer_transaction_id = Some(transfer_transaction_id);
  }

  pub fn with_transfer_transaction_id(mut self, transfer_transaction_id: String) -> HybridTransaction {
    self.transfer_transaction_id = Some(transfer_transaction_id);
    self
  }

  pub fn transfer_transaction_id(&self) -> Option<&String> {
    self.transfer_transaction_id.as_ref()
  }

  pub fn reset_transfer_transaction_id(&mut self) {
    self.transfer_transaction_id = None;
  }

  pub fn set_matched_transaction_id(&mut self, matched_transaction_id: String) {
    self.matched_transaction_id = Some(matched_transaction_id);
  }

  pub fn with_matched_transaction_id(mut self, matched_transaction_id: String) -> HybridTransaction {
    self.matched_transaction_id = Some(matched_transaction_id);
    self
  }

  pub fn matched_transaction_id(&self) -> Option<&String> {
    self.matched_transaction_id.as_ref()
  }

  pub fn reset_matched_transaction_id(&mut self) {
    self.matched_transaction_id = None;
  }

  pub fn set_import_id(&mut self, import_id: String) {
    self.import_id = Some(import_id);
  }

  pub fn with_import_id(mut self, import_id: String) -> HybridTransaction {
    self.import_id = Some(import_id);
    self
  }

  pub fn import_id(&self) -> Option<&String> {
    self.import_id.as_ref()
  }

  pub fn reset_import_id(&mut self) {
    self.import_id = None;
  }

  pub fn set_import_payee_name(&mut self, import_payee_name: String) {
    self.import_payee_name = Some(import_payee_name);
  }

  pub fn with_import_payee_name(mut self, import_payee_name: String) -> HybridTransaction {
    self.import_payee_name = Some(import_payee_name);
    self
  }

  pub fn import_payee_name(&self) -> Option<&String> {
    self.import_payee_name.as_ref()
  }

  pub fn reset_import_payee_name(&mut self) {
    self.import_payee_name = None;
  }

  pub fn set_import_payee_name_original(&mut self, import_payee_name_original: String) {
    self.import_payee_name_original = Some(import_payee_name_original);
  }

  pub fn with_import_payee_name_original(mut self, import_payee_name_original: String) -> HybridTransaction {
    self.import_payee_name_original = Some(import_payee_name_original);
    self
  }

  pub fn import_payee_name_original(&self) -> Option<&String> {
    self.import_payee_name_original.as_ref()
  }

  pub fn reset_import_payee_name_original(&mut self) {
    self.import_payee_name_original = None;
  }

  pub fn set_deleted(&mut self, deleted: bool) {
    self.deleted = deleted;
  }

  pub fn with_deleted(mut self, deleted: bool) -> HybridTransaction {
    self.deleted = deleted;
    self
  }

  pub fn deleted(&self) -> &bool {
    &self.deleted
  }


  pub fn set_type(&mut self, _type: String) {
    self._type = _type;
  }

  pub fn with_type(mut self, _type: String) -> HybridTransaction {
    self._type = _type;
    self
  }

  pub fn _type(&self) -> &String {
    &self._type
  }


  pub fn set_parent_transaction_id(&mut self, parent_transaction_id: String) {
    self.parent_transaction_id = Some(parent_transaction_id);
  }

  pub fn with_parent_transaction_id(mut self, parent_transaction_id: String) -> HybridTransaction {
    self.parent_transaction_id = Some(parent_transaction_id);
    self
  }

  pub fn parent_transaction_id(&self) -> Option<&String> {
    self.parent_transaction_id.as_ref()
  }

  pub fn reset_parent_transaction_id(&mut self) {
    self.parent_transaction_id = None;
  }

  pub fn set_account_name(&mut self, account_name: String) {
    self.account_name = account_name;
  }

  pub fn with_account_name(mut self, account_name: String) -> HybridTransaction {
    self.account_name = account_name;
    self
  }

  pub fn account_name(&self) -> &String {
    &self.account_name
  }


  pub fn set_payee_name(&mut self, payee_name: String) {
    self.payee_name = Some(payee_name);
  }

  pub fn with_payee_name(mut self, payee_name: String) -> HybridTransaction {
    self.payee_name = Some(payee_name);
    self
  }

  pub fn payee_name(&self) -> Option<&String> {
    self.payee_name.as_ref()
  }

  pub fn reset_payee_name(&mut self) {
    self.payee_name = None;
  }

  pub fn set_category_name(&mut self, category_name: String) {
    self.category_name = Some(category_name);
  }

  pub fn with_category_name(mut self, category_name: String) -> HybridTransaction {
    self.category_name = Some(category_name);
    self
  }

  pub fn category_name(&self) -> Option<&String> {
    self.category_name.as_ref()
  }

  pub fn reset_category_name(&mut self) {
    self.category_name = None;
  }

}



