/* 
 * YNAB API Endpoints
 *
 * Our API uses a REST based design, leverages the JSON data format, and relies upon HTTPS for transport. We respond with meaningful HTTP response codes and if an error occurs, we include error details in the response body.  API Documentation is at https://api.youneedabudget.com
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct MonthDetail {
  #[serde(rename = "month")]
  month: String,
  #[serde(rename = "note")]
  note: Option<String>,
  /// The total amount of transactions categorized to 'Inflow: Ready to Assign' in the month
  #[serde(rename = "income")]
  income: i64,
  /// The total amount budgeted in the month
  #[serde(rename = "budgeted")]
  budgeted: i64,
  /// The total amount of transactions in the month, excluding those categorized to 'Inflow: Ready to Assign'
  #[serde(rename = "activity")]
  activity: i64,
  /// The available amount for 'Ready to Assign'
  #[serde(rename = "to_be_budgeted")]
  to_be_budgeted: i64,
  /// The Age of Money as of the month
  #[serde(rename = "age_of_money")]
  age_of_money: Option<i32>,
  /// Whether or not the month has been deleted.  Deleted months will only be included in delta requests.
  #[serde(rename = "deleted")]
  deleted: bool,
  /// The budget month categories.  Amounts (budgeted, activity, balance, etc.) are specific to the {month} parameter specified.
  #[serde(rename = "categories")]
  categories: Vec<::models::Category>
}

impl MonthDetail {
  pub fn new(month: String, income: i64, budgeted: i64, activity: i64, to_be_budgeted: i64, deleted: bool, categories: Vec<::models::Category>) -> MonthDetail {
    MonthDetail {
      month: month,
      note: None,
      income: income,
      budgeted: budgeted,
      activity: activity,
      to_be_budgeted: to_be_budgeted,
      age_of_money: None,
      deleted: deleted,
      categories: categories
    }
  }

  pub fn set_month(&mut self, month: String) {
    self.month = month;
  }

  pub fn with_month(mut self, month: String) -> MonthDetail {
    self.month = month;
    self
  }

  pub fn month(&self) -> &String {
    &self.month
  }


  pub fn set_note(&mut self, note: String) {
    self.note = Some(note);
  }

  pub fn with_note(mut self, note: String) -> MonthDetail {
    self.note = Some(note);
    self
  }

  pub fn note(&self) -> Option<&String> {
    self.note.as_ref()
  }

  pub fn reset_note(&mut self) {
    self.note = None;
  }

  pub fn set_income(&mut self, income: i64) {
    self.income = income;
  }

  pub fn with_income(mut self, income: i64) -> MonthDetail {
    self.income = income;
    self
  }

  pub fn income(&self) -> &i64 {
    &self.income
  }


  pub fn set_budgeted(&mut self, budgeted: i64) {
    self.budgeted = budgeted;
  }

  pub fn with_budgeted(mut self, budgeted: i64) -> MonthDetail {
    self.budgeted = budgeted;
    self
  }

  pub fn budgeted(&self) -> &i64 {
    &self.budgeted
  }


  pub fn set_activity(&mut self, activity: i64) {
    self.activity = activity;
  }

  pub fn with_activity(mut self, activity: i64) -> MonthDetail {
    self.activity = activity;
    self
  }

  pub fn activity(&self) -> &i64 {
    &self.activity
  }


  pub fn set_to_be_budgeted(&mut self, to_be_budgeted: i64) {
    self.to_be_budgeted = to_be_budgeted;
  }

  pub fn with_to_be_budgeted(mut self, to_be_budgeted: i64) -> MonthDetail {
    self.to_be_budgeted = to_be_budgeted;
    self
  }

  pub fn to_be_budgeted(&self) -> &i64 {
    &self.to_be_budgeted
  }


  pub fn set_age_of_money(&mut self, age_of_money: i32) {
    self.age_of_money = Some(age_of_money);
  }

  pub fn with_age_of_money(mut self, age_of_money: i32) -> MonthDetail {
    self.age_of_money = Some(age_of_money);
    self
  }

  pub fn age_of_money(&self) -> Option<&i32> {
    self.age_of_money.as_ref()
  }

  pub fn reset_age_of_money(&mut self) {
    self.age_of_money = None;
  }

  pub fn set_deleted(&mut self, deleted: bool) {
    self.deleted = deleted;
  }

  pub fn with_deleted(mut self, deleted: bool) -> MonthDetail {
    self.deleted = deleted;
    self
  }

  pub fn deleted(&self) -> &bool {
    &self.deleted
  }


  pub fn set_categories(&mut self, categories: Vec<::models::Category>) {
    self.categories = categories;
  }

  pub fn with_categories(mut self, categories: Vec<::models::Category>) -> MonthDetail {
    self.categories = categories;
    self
  }

  pub fn categories(&self) -> &Vec<::models::Category> {
    &self.categories
  }


}



