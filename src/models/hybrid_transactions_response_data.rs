/* 
 * YNAB API Endpoints
 *
 * Our API uses a REST based design, leverages the JSON data format, and relies upon HTTPS for transport. We respond with meaningful HTTP response codes and if an error occurs, we include error details in the response body.  API Documentation is at https://api.youneedabudget.com
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct HybridTransactionsResponseData {
  #[serde(rename = "transactions")]
  transactions: Vec<::models::HybridTransaction>,
  /// The knowledge of the server
  #[serde(rename = "server_knowledge")]
  server_knowledge: Option<i64>
}

impl HybridTransactionsResponseData {
  pub fn new(transactions: Vec<::models::HybridTransaction>) -> HybridTransactionsResponseData {
    HybridTransactionsResponseData {
      transactions: transactions,
      server_knowledge: None
    }
  }

  pub fn set_transactions(&mut self, transactions: Vec<::models::HybridTransaction>) {
    self.transactions = transactions;
  }

  pub fn with_transactions(mut self, transactions: Vec<::models::HybridTransaction>) -> HybridTransactionsResponseData {
    self.transactions = transactions;
    self
  }

  pub fn transactions(&self) -> &Vec<::models::HybridTransaction> {
    &self.transactions
  }


  pub fn set_server_knowledge(&mut self, server_knowledge: i64) {
    self.server_knowledge = Some(server_knowledge);
  }

  pub fn with_server_knowledge(mut self, server_knowledge: i64) -> HybridTransactionsResponseData {
    self.server_knowledge = Some(server_knowledge);
    self
  }

  pub fn server_knowledge(&self) -> Option<&i64> {
    self.server_knowledge.as_ref()
  }

  pub fn reset_server_knowledge(&mut self) {
    self.server_knowledge = None;
  }

}



