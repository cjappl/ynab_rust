/* 
 * YNAB API Endpoints
 *
 * Our API uses a REST based design, leverages the JSON data format, and relies upon HTTPS for transport. We respond with meaningful HTTP response codes and if an error occurs, we include error details in the response body.  API Documentation is at https://api.youneedabudget.com
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct SaveSubTransaction {
  /// The subtransaction amount in milliunits format.
  #[serde(rename = "amount")]
  amount: i64,
  /// The payee for the subtransaction.
  #[serde(rename = "payee_id")]
  payee_id: Option<String>,
  /// The payee name.  If a `payee_name` value is provided and `payee_id` has a null value, the `payee_name` value will be used to resolve the payee by either (1) a matching payee rename rule (only if import_id is also specified on parent transaction) or (2) a payee with the same name or (3) creation of a new payee.
  #[serde(rename = "payee_name")]
  payee_name: Option<String>,
  /// The category for the subtransaction.  Credit Card Payment categories are not permitted and will be ignored if supplied.
  #[serde(rename = "category_id")]
  category_id: Option<String>,
  #[serde(rename = "memo")]
  memo: Option<String>
}

impl SaveSubTransaction {
  pub fn new(amount: i64) -> SaveSubTransaction {
    SaveSubTransaction {
      amount: amount,
      payee_id: None,
      payee_name: None,
      category_id: None,
      memo: None
    }
  }

  pub fn set_amount(&mut self, amount: i64) {
    self.amount = amount;
  }

  pub fn with_amount(mut self, amount: i64) -> SaveSubTransaction {
    self.amount = amount;
    self
  }

  pub fn amount(&self) -> &i64 {
    &self.amount
  }


  pub fn set_payee_id(&mut self, payee_id: String) {
    self.payee_id = Some(payee_id);
  }

  pub fn with_payee_id(mut self, payee_id: String) -> SaveSubTransaction {
    self.payee_id = Some(payee_id);
    self
  }

  pub fn payee_id(&self) -> Option<&String> {
    self.payee_id.as_ref()
  }

  pub fn reset_payee_id(&mut self) {
    self.payee_id = None;
  }

  pub fn set_payee_name(&mut self, payee_name: String) {
    self.payee_name = Some(payee_name);
  }

  pub fn with_payee_name(mut self, payee_name: String) -> SaveSubTransaction {
    self.payee_name = Some(payee_name);
    self
  }

  pub fn payee_name(&self) -> Option<&String> {
    self.payee_name.as_ref()
  }

  pub fn reset_payee_name(&mut self) {
    self.payee_name = None;
  }

  pub fn set_category_id(&mut self, category_id: String) {
    self.category_id = Some(category_id);
  }

  pub fn with_category_id(mut self, category_id: String) -> SaveSubTransaction {
    self.category_id = Some(category_id);
    self
  }

  pub fn category_id(&self) -> Option<&String> {
    self.category_id.as_ref()
  }

  pub fn reset_category_id(&mut self) {
    self.category_id = None;
  }

  pub fn set_memo(&mut self, memo: String) {
    self.memo = Some(memo);
  }

  pub fn with_memo(mut self, memo: String) -> SaveSubTransaction {
    self.memo = Some(memo);
    self
  }

  pub fn memo(&self) -> Option<&String> {
    self.memo.as_ref()
  }

  pub fn reset_memo(&mut self) {
    self.memo = None;
  }

}



