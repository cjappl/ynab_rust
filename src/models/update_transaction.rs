/* 
 * YNAB API Endpoints
 *
 * Our API uses a REST based design, leverages the JSON data format, and relies upon HTTPS for transport. We respond with meaningful HTTP response codes and if an error occurs, we include error details in the response body.  API Documentation is at https://api.youneedabudget.com
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct UpdateTransaction {
  #[serde(rename = "account_id")]
  account_id: String,
  /// The transaction date in ISO format (e.g. 2016-12-01).  Future dates (scheduled transactions) are not permitted.  Split transaction dates cannot be changed and if a different date is supplied it will be ignored.
  #[serde(rename = "date")]
  date: String,
  /// The transaction amount in milliunits format.  Split transaction amounts cannot be changed and if a different amount is supplied it will be ignored.
  #[serde(rename = "amount")]
  amount: i64,
  /// The payee for the transaction.  To create a transfer between two accounts, use the account transfer payee pointing to the target account.  Account transfer payees are specified as `tranfer_payee_id` on the account resource.
  #[serde(rename = "payee_id")]
  payee_id: Option<String>,
  /// The payee name.  If a `payee_name` value is provided and `payee_id` has a null value, the `payee_name` value will be used to resolve the payee by either (1) a matching payee rename rule (only if `import_id` is also specified) or (2) a payee with the same name or (3) creation of a new payee.
  #[serde(rename = "payee_name")]
  payee_name: Option<String>,
  /// The category for the transaction.  To configure a split transaction, you can specify null for `category_id` and provide a `subtransactions` array as part of the transaction object.  If an existing transaction is a split, the `category_id` cannot be changed.  Credit Card Payment categories are not permitted and will be ignored if supplied.
  #[serde(rename = "category_id")]
  category_id: Option<String>,
  #[serde(rename = "memo")]
  memo: Option<String>,
  /// The cleared status of the transaction
  #[serde(rename = "cleared")]
  cleared: Option<String>,
  /// Whether or not the transaction is approved.  If not supplied, transaction will be unapproved by default.
  #[serde(rename = "approved")]
  approved: Option<bool>,
  /// The transaction flag
  #[serde(rename = "flag_color")]
  flag_color: Option<String>,
  /// If specified, the new transaction will be assigned this `import_id` and considered \"imported\".  We will also attempt to match this imported transaction to an existing \"user-entered\" transation on the same account, with the same amount, and with a date +/-10 days from the imported transaction date.<br><br>Transactions imported through File Based Import or Direct Import (not through the API) are assigned an import_id in the format: 'YNAB:[milliunit_amount]:[iso_date]:[occurrence]'. For example, a transaction dated 2015-12-30 in the amount of -$294.23 USD would have an import_id of 'YNAB:-294230:2015-12-30:1'.  If a second transaction on the same account was imported and had the same date and same amount, its import_id would be 'YNAB:-294230:2015-12-30:2'.  Using a consistent format will prevent duplicates through Direct Import and File Based Import.<br><br>If import_id is omitted or specified as null, the transaction will be treated as a \"user-entered\" transaction. As such, it will be eligible to be matched against transactions later being imported (via DI, FBI, or API).
  #[serde(rename = "import_id")]
  import_id: Option<String>,
  /// An array of subtransactions to configure a transaction as a split.  Updating `subtransactions` on an existing split transaction is not supported.
  #[serde(rename = "subtransactions")]
  subtransactions: Option<Vec<::models::SaveSubTransaction>>
}

impl UpdateTransaction {
  pub fn new(account_id: String, date: String, amount: i64) -> UpdateTransaction {
    UpdateTransaction {
      account_id: account_id,
      date: date,
      amount: amount,
      payee_id: None,
      payee_name: None,
      category_id: None,
      memo: None,
      cleared: None,
      approved: None,
      flag_color: None,
      import_id: None,
      subtransactions: None
    }
  }

  pub fn set_account_id(&mut self, account_id: String) {
    self.account_id = account_id;
  }

  pub fn with_account_id(mut self, account_id: String) -> UpdateTransaction {
    self.account_id = account_id;
    self
  }

  pub fn account_id(&self) -> &String {
    &self.account_id
  }


  pub fn set_date(&mut self, date: String) {
    self.date = date;
  }

  pub fn with_date(mut self, date: String) -> UpdateTransaction {
    self.date = date;
    self
  }

  pub fn date(&self) -> &String {
    &self.date
  }


  pub fn set_amount(&mut self, amount: i64) {
    self.amount = amount;
  }

  pub fn with_amount(mut self, amount: i64) -> UpdateTransaction {
    self.amount = amount;
    self
  }

  pub fn amount(&self) -> &i64 {
    &self.amount
  }


  pub fn set_payee_id(&mut self, payee_id: String) {
    self.payee_id = Some(payee_id);
  }

  pub fn with_payee_id(mut self, payee_id: String) -> UpdateTransaction {
    self.payee_id = Some(payee_id);
    self
  }

  pub fn payee_id(&self) -> Option<&String> {
    self.payee_id.as_ref()
  }

  pub fn reset_payee_id(&mut self) {
    self.payee_id = None;
  }

  pub fn set_payee_name(&mut self, payee_name: String) {
    self.payee_name = Some(payee_name);
  }

  pub fn with_payee_name(mut self, payee_name: String) -> UpdateTransaction {
    self.payee_name = Some(payee_name);
    self
  }

  pub fn payee_name(&self) -> Option<&String> {
    self.payee_name.as_ref()
  }

  pub fn reset_payee_name(&mut self) {
    self.payee_name = None;
  }

  pub fn set_category_id(&mut self, category_id: String) {
    self.category_id = Some(category_id);
  }

  pub fn with_category_id(mut self, category_id: String) -> UpdateTransaction {
    self.category_id = Some(category_id);
    self
  }

  pub fn category_id(&self) -> Option<&String> {
    self.category_id.as_ref()
  }

  pub fn reset_category_id(&mut self) {
    self.category_id = None;
  }

  pub fn set_memo(&mut self, memo: String) {
    self.memo = Some(memo);
  }

  pub fn with_memo(mut self, memo: String) -> UpdateTransaction {
    self.memo = Some(memo);
    self
  }

  pub fn memo(&self) -> Option<&String> {
    self.memo.as_ref()
  }

  pub fn reset_memo(&mut self) {
    self.memo = None;
  }

  pub fn set_cleared(&mut self, cleared: String) {
    self.cleared = Some(cleared);
  }

  pub fn with_cleared(mut self, cleared: String) -> UpdateTransaction {
    self.cleared = Some(cleared);
    self
  }

  pub fn cleared(&self) -> Option<&String> {
    self.cleared.as_ref()
  }

  pub fn reset_cleared(&mut self) {
    self.cleared = None;
  }

  pub fn set_approved(&mut self, approved: bool) {
    self.approved = Some(approved);
  }

  pub fn with_approved(mut self, approved: bool) -> UpdateTransaction {
    self.approved = Some(approved);
    self
  }

  pub fn approved(&self) -> Option<&bool> {
    self.approved.as_ref()
  }

  pub fn reset_approved(&mut self) {
    self.approved = None;
  }

  pub fn set_flag_color(&mut self, flag_color: String) {
    self.flag_color = Some(flag_color);
  }

  pub fn with_flag_color(mut self, flag_color: String) -> UpdateTransaction {
    self.flag_color = Some(flag_color);
    self
  }

  pub fn flag_color(&self) -> Option<&String> {
    self.flag_color.as_ref()
  }

  pub fn reset_flag_color(&mut self) {
    self.flag_color = None;
  }

  pub fn set_import_id(&mut self, import_id: String) {
    self.import_id = Some(import_id);
  }

  pub fn with_import_id(mut self, import_id: String) -> UpdateTransaction {
    self.import_id = Some(import_id);
    self
  }

  pub fn import_id(&self) -> Option<&String> {
    self.import_id.as_ref()
  }

  pub fn reset_import_id(&mut self) {
    self.import_id = None;
  }

  pub fn set_subtransactions(&mut self, subtransactions: Vec<::models::SaveSubTransaction>) {
    self.subtransactions = Some(subtransactions);
  }

  pub fn with_subtransactions(mut self, subtransactions: Vec<::models::SaveSubTransaction>) -> UpdateTransaction {
    self.subtransactions = Some(subtransactions);
    self
  }

  pub fn subtransactions(&self) -> Option<&Vec<::models::SaveSubTransaction>> {
    self.subtransactions.as_ref()
  }

  pub fn reset_subtransactions(&mut self) {
    self.subtransactions = None;
  }

}



